<?php

/**
 * @file
 * The block module that displays all the products on the store page
 */

/**
 * Implements hook_help().
 */
function mymodule_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mymodule':
    	return '<p>' . t('Displays on the page that has all the products in the store') . '</p>';
  		break;
  }
}

/**
 * Implements hook_menu().
 */
function mymodule_menu() {
	$items = array();
  $items['all_products'] = array(
  	'title'            => 'All products',
    'page callback'    => 'mymodule_all_products',
    'access arguments' => array('access content'),
  );
  $items['admin/config/development/mymodule'] = array(
  	'title'            => 'Settings mymodule',
  	'page callback'    => 'mymodule_get_form',
  	'description'      => 'Configure and sorting of items on a page.',
  	'access arguments' => array('admin'),
  );
  return $items;
}

/**
 * Page callback for All product page.
 */
function mymodule_all_products() {
	// Select all products from the database.
	$query = db_select('commerce_product', 'cp');
	$query->join('field_data_field_product', 'fp', 'cp.product_id = fp.field_product_product_id');
	$query->join('field_data_field_image_product', 'ip', 'cp.product_id = ip.entity_id');
	$query->join('field_data_commerce_price', 'price', 'ip.entity_id = price.entity_id');
	$query->fields('cp', array('product_id', 'title', 'created'));
	$query->fields('fp', array('entity_id'));
	$query->fields('ip', array('field_image_product_fid'));
	$query->fields('price', array('commerce_price_amount'));
	$query->orderBy(variable_get('sort_by', FALSE), variable_get('sort_asc_desc', FALSE));
	$query->range(0, variable_get('quantity', FALSE));
	$products = $query->execute()->fetchAll();
	$output = '';
	foreach ($products as $product) {
		$file = file_load($product->field_image_product_fid);
		$arguments = array(
			'path' => $file->uri,
			'style_name' => '295x220xs',
			'attributes' => array('class' => array('img-all-products')),
		);
		$img = theme('image_style', $arguments);
		$link = 'node/' . $product->entity_id;
		$output .= l($product->title, $link, array('attributes' => array('class' => array('title-all-products')))) . '<br>' . l($img, $link, array('html' => TRUE)) . '<br>';
	}
	return $output;
}

/**
 * Function for display form.
 */
function mymodule_get_form() {
	$form = drupal_get_form('mymodule_form_settings');
	$form = drupal_render($form);
	return $form;
}

/**
 * Page callback for form settings.
 */
function mymodule_form_settings() {
	$form = array();
	$form['quantity'] = array(
		'#type'	         => 'textfield',
		'#size'          => 25,
		'#title' 				 => t('Quantity of elements per page'),
		'#default_value' => variable_get('quantity', FALSE),
	);
	$form['fieldset'] = array(
		'#type'  => 'fieldset',
		'#title' => t('Sorting'),
	);
	$form['fieldset']['sort_by'] = array(
		'#type' 							    => 'radios',
  	'#title' 									=> t('Sort by'),
  	'#options'                => array(
  		'title'                 => t('Name'),
  		'created'               => t('Created'),
  		'commerce_price_amount' => t('Price'),
  	),
  	'#default_value' => variable_get('sort_by', FALSE),
  );
	$form['fieldset']['sort_asc_desc'] = array(
		'#type' 				 => 'radios',
		'#title' 				 => t('Sorting ASC/DESC'),
		'#options' 			 => array(
			'asc' 				 => t('ASC'),
			'desc'  			 => t('DESC'),
		),
		'#default_value' => variable_get('sort_asc_desc', FALSE),
	);
	$form['checkbox_redirect'] = array(
		'#type'  => 'checkbox',
		'#title' => t('After saving the settings, go to the page All products'),
	);
	return system_settings_form($form);
}

/**
 * Check the field name to the correct input
 */
function mymodule_form_settings_validate($form, &$form_state) {
	if(!is_numeric($form_state['values']['quantity'])) {
		form_set_error('quantity', t('You can only input numbers'));
	}
 	if(!empty($form_state['values']['checkbox_redirect'])) {
 		$form_state['redirect'] = array('all_products');
  }
}
